// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "myWindow.h"

Fl_Double_Window *pMain_win=(Fl_Double_Window *)0;

Fl_Menu_Bar *pMain_menu=(Fl_Menu_Bar *)0;

MyGlWindow *pRender_glWin=(MyGlWindow *)0;

Fl_Button *pSaveClt_bttn=(Fl_Button *)0;

Fl_Group *pTarget_group=(Fl_Group *)0;

Fl_Button *pDisTar_bttn=(Fl_Button *)0;

Fl_Check_Button *pSetTar_bttn=(Fl_Check_Button *)0;

Fl_Button *pClrTar_bttn=(Fl_Button *)0;

Fl_Group *pSel_group=(Fl_Group *)0;

Fl_Button *pAddSel_bttn=(Fl_Button *)0;

Fl_Check_Button *pEdtSel_bttn=(Fl_Check_Button *)0;

Fl_Group *pColorFr_group=(Fl_Group *)0;

Fl_Input *pRFr_input=(Fl_Input *)0;

Fl_Input *pGFr_input=(Fl_Input *)0;

Fl_Input *pBFr_input=(Fl_Input *)0;

Fl_Input *pAFr_input=(Fl_Input *)0;

Fl_Group *pColorTo_group=(Fl_Group *)0;

Fl_Input *pRTo_input=(Fl_Input *)0;

Fl_Input *pGTo_input=(Fl_Input *)0;

Fl_Input *pBTo_input=(Fl_Input *)0;

Fl_Input *pATo_input=(Fl_Input *)0;

Fl_Button *pCopyColor_bttn=(Fl_Button *)0;

Fl_Button *pDelSel_bttn=(Fl_Button *)0;

Fl_Button *pSetC_bttn=(Fl_Button *)0;

Fl_Button *pTruncate_bttn=(Fl_Button *)0;

Fl_Value_Slider *pLevelReduce_valScl=(Fl_Value_Slider *)0;

Fl_Button *pShowRed_bttn=(Fl_Button *)0;

Fl_Double_Window* make_window() {
  { pMain_win = new Fl_Double_Window(1258, 713, "X51");
    { pMain_menu = new Fl_Menu_Bar(0, 0, 1260, 20);
    } // Fl_Menu_Bar* pMain_menu
    { pRender_glWin = new MyGlWindow(5, 25, 1130, 680);
      pRender_glWin->box(FL_DOWN_BOX);
      pRender_glWin->color(FL_BACKGROUND_COLOR);
      pRender_glWin->selection_color(FL_BACKGROUND_COLOR);
      pRender_glWin->labeltype(FL_NORMAL_LABEL);
      pRender_glWin->labelfont(0);
      pRender_glWin->labelsize(14);
      pRender_glWin->labelcolor(FL_FOREGROUND_COLOR);
      pRender_glWin->align(Fl_Align(FL_ALIGN_TOP));
      pRender_glWin->when(FL_WHEN_RELEASE);
      pRender_glWin->end();
    } // MyGlWindow* pRender_glWin
    { pSaveClt_bttn = new Fl_Button(1140, 616, 115, 20, "save cluster");
      pSaveClt_bttn->callback((Fl_Callback*)GenCluster);
    } // Fl_Button* pSaveClt_bttn
    { pTarget_group = new Fl_Group(1140, 25, 115, 75);
      pTarget_group->box(FL_DOWN_BOX);
      { pDisTar_bttn = new Fl_Button(1145, 50, 105, 20, "display");
        pDisTar_bttn->callback((Fl_Callback*)DisplayTarget);
      } // Fl_Button* pDisTar_bttn
      { pSetTar_bttn = new Fl_Check_Button(1145, 30, 105, 15, "set target");
        pSetTar_bttn->down_box(FL_DOWN_BOX);
        pSetTar_bttn->callback((Fl_Callback*)SetTarget);
      } // Fl_Check_Button* pSetTar_bttn
      { pClrTar_bttn = new Fl_Button(1145, 75, 105, 20, "clear");
        pClrTar_bttn->callback((Fl_Callback*)ClearTarget);
      } // Fl_Button* pClrTar_bttn
      pTarget_group->end();
    } // Fl_Group* pTarget_group
    { pSel_group = new Fl_Group(1140, 125, 115, 375);
      pSel_group->box(FL_DOWN_BOX);
      { pAddSel_bttn = new Fl_Button(1145, 130, 105, 20, "add selecter");
        pAddSel_bttn->callback((Fl_Callback*)AddSelecter);
      } // Fl_Button* pAddSel_bttn
      { pEdtSel_bttn = new Fl_Check_Button(1145, 150, 105, 20, "edit selecter");
        pEdtSel_bttn->down_box(FL_DOWN_BOX);
        pEdtSel_bttn->callback((Fl_Callback*)EditSelecter);
      } // Fl_Check_Button* pEdtSel_bttn
      { pColorFr_group = new Fl_Group(1145, 170, 105, 90);
        pColorFr_group->box(FL_DOWN_BOX);
        { pRFr_input = new Fl_Input(1175, 175, 70, 20, "R: ");
        } // Fl_Input* pRFr_input
        { pGFr_input = new Fl_Input(1175, 195, 70, 20, "G: ");
        } // Fl_Input* pGFr_input
        { pBFr_input = new Fl_Input(1175, 215, 70, 20, "B: ");
        } // Fl_Input* pBFr_input
        { pAFr_input = new Fl_Input(1175, 236, 70, 20, "A: ");
        } // Fl_Input* pAFr_input
        pColorFr_group->end();
      } // Fl_Group* pColorFr_group
      { pColorTo_group = new Fl_Group(1145, 290, 105, 115);
        pColorTo_group->box(FL_DOWN_BOX);
        { pRTo_input = new Fl_Input(1175, 295, 70, 20, "R: ");
        } // Fl_Input* pRTo_input
        { pGTo_input = new Fl_Input(1175, 315, 70, 20, "G: ");
        } // Fl_Input* pGTo_input
        { pBTo_input = new Fl_Input(1175, 335, 70, 20, "B: ");
        } // Fl_Input* pBTo_input
        { pATo_input = new Fl_Input(1175, 356, 70, 20, "A: ");
        } // Fl_Input* pATo_input
        { pCopyColor_bttn = new Fl_Button(1150, 380, 95, 20, "copy from");
          pCopyColor_bttn->callback((Fl_Callback*)CopyColor);
        } // Fl_Button* pCopyColor_bttn
        pColorTo_group->end();
      } // Fl_Group* pColorTo_group
      { pDelSel_bttn = new Fl_Button(1145, 451, 105, 20, "delete");
      } // Fl_Button* pDelSel_bttn
      { pSetC_bttn = new Fl_Button(1145, 428, 105, 20, "set color");
        pSetC_bttn->callback((Fl_Callback*)SetColor);
      } // Fl_Button* pSetC_bttn
      { pTruncate_bttn = new Fl_Button(1145, 474, 105, 20, "truncate");
        pTruncate_bttn->callback((Fl_Callback*)Truncate);
      } // Fl_Button* pTruncate_bttn
      pSel_group->end();
    } // Fl_Group* pSel_group
    { pLevelReduce_valScl = new Fl_Value_Slider(1140, 539, 115, 15, "level reduce");
      pLevelReduce_valScl->type(5);
      pLevelReduce_valScl->value(0.05);
      pLevelReduce_valScl->textsize(14);
      pLevelReduce_valScl->callback((Fl_Callback*)ReduceLevel);
      pLevelReduce_valScl->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Slider* pLevelReduce_valScl
    { pShowRed_bttn = new Fl_Button(1140, 556, 115, 20, "show reduce");
      pShowRed_bttn->callback((Fl_Callback*)ReduceLevel);
    } // Fl_Button* pShowRed_bttn
    pMain_win->end();
  } // Fl_Double_Window* pMain_win
  static Fl_Menu_Item aMainItem[] = 
  {
      {"file", 0, 0, 0, FL_SUBMENU},
          {"load data", 0, LoadData, pRender_glWin},
          {0},
      {0},
  };
  pMain_menu->menu(aMainItem);
  pRFr_input->value("0");
  pGFr_input->value("0");
  pBFr_input->value("0");
  pAFr_input->value("0");
  
  pRTo_input->value("0");
  pGTo_input->value("0");
  pBTo_input->value("0");
  pATo_input->value("0");
  return pMain_win;
}
